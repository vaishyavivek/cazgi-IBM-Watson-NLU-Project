{"version":3,"sources":["EmotionTable.js","App.js","reportWebVitals.js","index.js"],"names":["EmotionTable","className","Object","entries","this","props","emotions","map","entry","Number","parseFloat","toLocaleString","undefined","style","minimumFractionDigits","React","Component","App","state","innercomp","rows","cols","id","mode","sentimentOutput","sentiment","renderTextArea","document","getElementById","value","setState","renderTextBox","sendForSentimentAnalysis","url","axios","get","then","response","data","output","color","fontSize","sendForEmotionAnalysis","title","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.0fab0eb8.chunk.js","sourcesContent":["import React from 'react';\nimport './bootstrap.min.css';\n\nclass EmotionTable extends React.Component {\n  render() {\n    return (\n      <div>\n        <table className=\"table table-bordered\">\n          <tbody>\n            {\n              Object.entries(this.props.emotions).map((entry) => {\n                return (\n                  <tr>\n                    <td>{entry[0]}</td>\n                    <td>{Number(parseFloat(entry[1])).toLocaleString(undefined, { style: 'percent', minimumFractionDigits: 2 })}</td>\n                  </tr>\n                );\n              })\n            }\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n\n}\nexport default EmotionTable;\n","import './bootstrap.min.css';\nimport './App.css';\nimport EmotionTable from './EmotionTable.js';\nimport React from 'react';\nimport axios from 'axios';\n\nclass App extends React.Component {\n  componentDidMount() {\n    document.title = \"Sentiment Analyzer\"\n  }\n\n  state = {\n    innercomp: <textarea rows=\"4\" cols=\"50\" id=\"textinput\" />,\n    mode: \"text\",\n    sentimentOutput: [],\n    sentiment: true\n  }\n\n  renderTextArea = () => {\n    document.getElementById(\"textinput\").value = \"\";\n    if (this.state.mode === \"url\") {\n      this.setState({\n        innercomp: <textarea rows=\"4\" cols=\"50\" id=\"textinput\" />,\n        mode: \"text\",\n        sentimentOutput: [],\n        sentiment: true\n      })\n    }\n  }\n\n  renderTextBox = () => {\n    document.getElementById(\"textinput\").value = \"\";\n    if (this.state.mode === \"text\") {\n      this.setState({\n        innercomp: <textarea rows=\"1\" cols=\"50\" id=\"textinput\" />,\n        mode: \"url\",\n        sentimentOutput: [],\n        sentiment: true\n      })\n    }\n  }\n\n  sendForSentimentAnalysis = () => {\n    this.setState({ sentiment: true });\n    let ret = \"\";\n    let url = \".\";\n\n    if (this.state.mode === \"url\") {\n      url = url + \"/url/sentiment?url=\" + document.getElementById(\"textinput\").value;\n    } else {\n      url = url + \"/text/sentiment?text=\" + document.getElementById(\"textinput\").value;\n    }\n    ret = axios.get(url);\n    ret.then((response) => {\n\n      //Include code here to check the sentiment and fomrat the data accordingly\n\n      this.setState({ sentimentOutput: response.data });\n      let output = response.data;\n      if (response.data === \"positive\") {\n        output = <div style={{ color: \"green\", fontSize: 20 }}>{response.data}</div>\n      } else if (response.data === \"negative\") {\n        output = <div style={{ color: \"red\", fontSize: 20 }}>{response.data}</div>\n      } else {\n        output = <div style={{ color: \"yellow\", fontSize: 20 }}>{response.data}</div>\n      }\n      this.setState({ sentimentOutput: output });\n    });\n  }\n\n  sendForEmotionAnalysis = () => {\n    this.setState({ sentiment: false });\n    let ret = \"\";\n    let url = \".\";\n    if (this.state.mode === \"url\") {\n      url = url + \"/url/emotion?url=\" + document.getElementById(\"textinput\").value;\n    } else {\n      url = url + \"/text/emotion/?text=\" + document.getElementById(\"textinput\").value;\n    }\n    ret = axios.get(url);\n\n    ret.then((response) => {\n      this.setState({ sentimentOutput: <EmotionTable emotions={response.data} /> });\n    });\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <button className=\"btn btn-info\" onClick={this.renderTextArea}>Text</button>\n        <button className=\"btn btn-dark\" onClick={this.renderTextBox}>URL</button>\n        <br /><br />\n        {this.state.innercomp}\n        <br />\n        <button className=\"btn-primary\" onClick={this.sendForSentimentAnalysis}>Analyze Sentiment</button>\n        <button className=\"btn-primary\" onClick={this.sendForEmotionAnalysis}>Analyze Emotion</button>\n        <br />\n        {this.state.sentimentOutput}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}